//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebPanel.RemoteVideoPlayerReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RemoteVideoPlayerReference.IRemoteVideoPlayerService"/*, SessionMode=System.ServiceModel.SessionMode.Required*/)]
    public interface IRemoteVideoPlayerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Play")]
        void Play();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Play")]
        System.Threading.Tasks.Task PlayAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/LevelUp")]
        void LevelUp();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/LevelUp")]
        System.Threading.Tasks.Task LevelUpAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/SelectMovie")]
        void SelectMovie();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/SelectMovie")]
        System.Threading.Tasks.Task SelectMovieAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Skip")]
        void Skip();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Skip")]
        System.Threading.Tasks.Task SkipAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/SkipBack")]
        void SkipBack();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/SkipBack")]
        System.Threading.Tasks.Task SkipBackAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/CloseApp")]
        void CloseApp();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/CloseApp")]
        System.Threading.Tasks.Task CloseAppAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/FastForward")]
        void FastForward();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/FastForward")]
        System.Threading.Tasks.Task FastForwardAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Rewind")]
        void Rewind();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Rewind")]
        System.Threading.Tasks.Task RewindAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/ChangeScreenState")]
        void ChangeScreenState();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/ChangeScreenState")]
        System.Threading.Tasks.Task ChangeScreenStateAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Mute")]
        void Mute();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Mute")]
        System.Threading.Tasks.Task MuteAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/VolumeDown")]
        void VolumeDown();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/VolumeDown")]
        System.Threading.Tasks.Task VolumeDownAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/VolumeUp")]
        void VolumeUp();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/VolumeUp")]
        System.Threading.Tasks.Task VolumeUpAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Pause")]
        void Pause();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Pause")]
        System.Threading.Tasks.Task PauseAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Stop")]
        void Stop();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Stop")]
        System.Threading.Tasks.Task StopAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Next")]
        void Next();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Next")]
        System.Threading.Tasks.Task NextAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Previous")]
        void Previous();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Previous")]
        System.Threading.Tasks.Task PreviousAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/SelectItem")]
        void SelectItem();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/SelectItem")]
        System.Threading.Tasks.Task SelectItemAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Info")]
        void Info();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IRemoteVideoPlayerService/Info")]
        System.Threading.Tasks.Task InfoAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action= "http://tempuri.org/IRemoteVideoPlayerService/PageDown")]
        void PageDown();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action= "http://tempuri.org/IRemoteVideoPlayerService/PageDown")]
        System.Threading.Tasks.Task PageDownAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action= "http://tempuri.org/IRemoteVideoPlayerService/PageUp")]
        void PageUp();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action= "http://tempuri.org/IRemoteVideoPlayerService/PageUp")]
        System.Threading.Tasks.Task PageUpAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action= "http://tempuri.org/IRemoteVideoPlayerService/Suspend")]
        void Suspend();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action= "http://tempuri.org/IRemoteVideoPlayerService/Suspend")]
        System.Threading.Tasks.Task SuspendAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRemoteVideoPlayerServiceChannel : WebPanel.RemoteVideoPlayerReference.IRemoteVideoPlayerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoteVideoPlayerServiceClient : System.ServiceModel.ClientBase<WebPanel.RemoteVideoPlayerReference.IRemoteVideoPlayerService>, WebPanel.RemoteVideoPlayerReference.IRemoteVideoPlayerService {
        
        public RemoteVideoPlayerServiceClient() {
        }
        
        public RemoteVideoPlayerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RemoteVideoPlayerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteVideoPlayerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RemoteVideoPlayerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void Play() {
            base.Channel.Play();
        }
        
        public System.Threading.Tasks.Task PlayAsync() {
            return base.Channel.PlayAsync();
        }
        
        public void LevelUp() {
            base.Channel.LevelUp();
        }
        
        public System.Threading.Tasks.Task LevelUpAsync() {
            return base.Channel.LevelUpAsync();
        }
        
        public void SelectMovie() {
            base.Channel.SelectMovie();
        }
        
        public System.Threading.Tasks.Task SelectMovieAsync() {
            return base.Channel.SelectMovieAsync();
        }
        
        public void Skip() {
            base.Channel.Skip();
        }
        
        public System.Threading.Tasks.Task SkipAsync() {
            return base.Channel.SkipAsync();
        }
        
        public void SkipBack() {
            base.Channel.SkipBack();
        }
        
        public System.Threading.Tasks.Task SkipBackAsync() {
            return base.Channel.SkipBackAsync();
        }
        
        public void CloseApp() {
            base.Channel.CloseApp();
        }
        
        public System.Threading.Tasks.Task CloseAppAsync() {
            return base.Channel.CloseAppAsync();
        }
        
        public void FastForward() {
            base.Channel.FastForward();
        }
        
        public System.Threading.Tasks.Task FastForwardAsync() {
            return base.Channel.FastForwardAsync();
        }
        
        public void Rewind() {
            base.Channel.Rewind();
        }
        
        public System.Threading.Tasks.Task RewindAsync() {
            return base.Channel.RewindAsync();
        }
        
        public void ChangeScreenState() {
            base.Channel.ChangeScreenState();
        }
        
        public System.Threading.Tasks.Task ChangeScreenStateAsync() {
            return base.Channel.ChangeScreenStateAsync();
        }
        
        public void Mute() {
            base.Channel.Mute();
        }
        
        public System.Threading.Tasks.Task MuteAsync() {
            return base.Channel.MuteAsync();
        }
        
        public void VolumeDown() {
            base.Channel.VolumeDown();
        }
        
        public System.Threading.Tasks.Task VolumeDownAsync() {
            return base.Channel.VolumeDownAsync();
        }
        
        public void VolumeUp() {
            base.Channel.VolumeUp();
        }
        
        public System.Threading.Tasks.Task VolumeUpAsync() {
            return base.Channel.VolumeUpAsync();
        }
        
        public void PageDown() {
            base.Channel.PageDown();
        }
        
        public System.Threading.Tasks.Task PageDownAsync() {
            return base.Channel.PageDownAsync();
        }
        
        public void PageUp() {
            base.Channel.PageUp();
        }
        
        public System.Threading.Tasks.Task PageUpAsync() {
            return base.Channel.PageUpAsync();
        }
        
        public void Pause() {
            base.Channel.Pause();
        }
        
        public System.Threading.Tasks.Task PauseAsync() {
            return base.Channel.PauseAsync();
        }
        
        public void Stop() {
            base.Channel.Stop();
        }
        
        public System.Threading.Tasks.Task StopAsync() {
            return base.Channel.StopAsync();
        }
        
        public void Next() {
            base.Channel.Next();
        }
        
        public System.Threading.Tasks.Task NextAsync() {
            return base.Channel.NextAsync();
        }
        
        public void Previous() {
            base.Channel.Previous();
        }
        
        public System.Threading.Tasks.Task PreviousAsync() {
            return base.Channel.PreviousAsync();
        }
        
        public void SelectItem() {
            base.Channel.SelectItem();
        }
        
        public System.Threading.Tasks.Task SelectItemAsync() {
            return base.Channel.SelectItemAsync();
        }
        
        public void Info() {
            base.Channel.Info();
        }
        
        public System.Threading.Tasks.Task InfoAsync() {
            return base.Channel.InfoAsync();
        }
        
        public void Suspend() {
            base.Channel.Suspend();
        }
        
        public System.Threading.Tasks.Task SuspendAsync() {
            return base.Channel.SuspendAsync();
        }
    }
}
